[{"/Users/Kat/bud/docs/web/src/index.js":"1","/Users/Kat/bud/docs/web/src/App.js":"2","/Users/Kat/bud/docs/web/src/reportWebVitals.js":"3","/Users/Kat/bud/docs/web/src/Components/HomePage.js":"4","/Users/Kat/bud/docs/web/src/Components/ActivityLog.js":"5","/Users/Kat/bud/docs/web/src/Components/Dashboard.js":"6","/Users/Kat/bud/docs/web/src/Components/Status.js":"7","/Users/Kat/bud/docs/web/src/Components/Graph.js":"8","/Users/Kat/bud/docs/web/src/Components/Metric.js":"9","/Users/Kat/bud/docs/web/src/Services/Firebase.js":"10"},{"size":500,"mtime":1610772004040,"results":"11","hashOfConfig":"12"},{"size":140,"mtime":1610772734368,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1610772004042,"results":"14","hashOfConfig":"12"},{"size":5095,"mtime":1610851086700,"results":"15","hashOfConfig":"12"},{"size":3300,"mtime":1610852279295,"results":"16","hashOfConfig":"12"},{"size":5772,"mtime":1610847817955,"results":"17","hashOfConfig":"12"},{"size":1702,"mtime":1610852165007,"results":"18","hashOfConfig":"12"},{"size":6112,"mtime":1610847817956,"results":"19","hashOfConfig":"12"},{"size":1636,"mtime":1610847817956,"results":"20","hashOfConfig":"12"},{"size":503,"mtime":1610822080925,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"16khs0y",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/Kat/bud/docs/web/src/index.js",[],["45","46"],"/Users/Kat/bud/docs/web/src/App.js",[],"/Users/Kat/bud/docs/web/src/reportWebVitals.js",[],"/Users/Kat/bud/docs/web/src/Components/HomePage.js",["47","48","49","50"],"/Users/Kat/bud/docs/web/src/Components/ActivityLog.js",["51"],"/Users/Kat/bud/docs/web/src/Components/Dashboard.js",["52","53","54"],"import { makeStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Graph from \"./Graph\";\nimport Button from '@material-ui/core/Button';\nimport Metric from \"./Metric\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport plant from '../newplant.png'\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: \"#F5F5FB\",\n        padding: \"30px 60px\",\n        height: \"100vh\",\n    },\n    header: {\n        color: \"#94B143\",\n        fontSize: 20,\n        margin: \"0 0 35px 0\",\n    },\n    labels: {\n        color: \"#87753F\",\n        fontSize: 17,\n        fontWeight: \"bold\"\n    },\n    button: {\n        backgroundColor: \"white\",\n        color: \"#8bc34a\",\n        fontSize: 14,\n        padding: \"4px 20px\",\n        fontFamily: \"Poppins\",\n        textTransform: \"none\",\n        borderRadius: 10,\n        float: \"right\",\n        \"&:hover\": {\n            backgroundColor: \"#8bc34a\",\n            color: \"white\"\n        },\n    },\n    image: {\n        paddingTop: 20,\n        width: 200,\n        height: 200\n    },\n    modal: {\n        padding: 30,\n    },\n    modalConditionHeader: {\n        color: \"#87753F\",\n        fontWeight: \"bold\",\n        marginBottom: 5,\n    },\n    modalConditions: {\n        color: \"#87753F\",\n        margin: 0\n    }\n});\n\nfunction Dashboard(props) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [species, setSpecies] = useState(\"sunflower\");\n\n    var soilMoistureStr = (props.soilMoistureData.length > 0) ? props.soilMoistureData.slice(-1)[0].y : \"?\";\n    var humidityStr = (props.humidityData.length > 0) ? props.humidityData.slice(-1)[0].y : \"?\";\n    var tempStr = (props.tempData.length > 0) ? props.tempData.slice(-1)[0].y : \"?\";\n    var lightStr = (props.lightData.length > 0) ? props.lightData.slice(-1)[0].y : \"?\";\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n    <Grid className={classes.root}>\n        {/* HEADER */}\n        <Grid container>\n            <Grid item xs={6}>\n                <h6 className={classes.header}>Dashboard</h6>\n            </Grid>\n            <Grid item xs={6}>\n                <Button startIcon={<AddIcon />}\n                        className={classes.button}\n                        onClick={handleClickOpen}>Track a new plant</Button>\n            </Grid>\n        </Grid>\n\n        {/* CHART */}\n        <p className={classes.labels}>Your {species}'s progress</p>\n        <Graph soilMoistureData={props.soilMoistureData} humidityData={props.humidityData} tempData={props.tempData} lightData={props.lightData}/>\n        \n        {/* STATS */}\n        <p className={classes.labels}>Helpful stats</p>\n        <Grid container spacing={2}>\n            <Grid item xs={3}><Metric metric=\"Soil Moisture\" actual={soilMoistureStr} target={props.tSoilMoisture} color={\"rgb(122, 206, 250, 1.0)\"}/></Grid>\n            <Grid item xs={3}><Metric metric=\"Humidity\" actual={humidityStr} target={props.tHumidity} color={\"rgb(97, 144, 232, 1.0)\"}/></Grid>\n            <Grid item xs={3}><Metric metric=\"Temperature\" actual={tempStr} target={props.tTemp} color={\"rgb(255, 175, 189, 1.0)\"}/></Grid>\n            <Grid item xs={3}><Metric metric=\"Light\" actual={lightStr} target={props.tLight} color={\"rgb(247, 151, 30, 1.0)\"}/></Grid>\n        </Grid>\n\n        {/* MODAL */}\n        <Dialog open={open} \n                onClose={handleClose}\n                className={classes.modal}\n                fullWidth={true}\n                maxWidth='sm'>\n                    <DialogContent className={classes.modal}>\n                        <Grid container>\n                            <Grid item xs={8}>\n                                <h3 style={{ color: \"#233F30\", margin: \"10px 0 0 0\" }}>What species are you tracking?</h3>\n                                <FormControl style={{minWidth: 150, marginTop: 2}}>\n                                    <Select\n                                        displayEmpty\n                                        inputProps={{ 'aria-label': 'Without label' }}\n                                    >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"Plant 1\">Plant 1</MenuItem>\n                                    <MenuItem value=\"Plant 2\">Plant 2</MenuItem>\n                                    <MenuItem value=\"Plant 3\">Plant 3</MenuItem>\n                                    </Select>\n                                </FormControl>\n                                <p className={classes.modalConditionHeader}>Find out its ideal conditions</p>\n                                <p className={classes.modalConditions}>Soil moisture</p>\n                                <p className={classes.modalConditions}>Humidity</p>\n                                <p className={classes.modalConditions}>Temperature</p>\n                                <p className={classes.modalConditions}>Light</p>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <img src={plant} className={classes.image}/>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n        </Dialog>\n    </Grid>\n    )\n}\n\nexport default Dashboard;","/Users/Kat/bud/docs/web/src/Components/Status.js",["55","56","57","58"],"/Users/Kat/bud/docs/web/src/Components/Graph.js",["59"],"import { makeStyles } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Chart from \"chart.js\";\nimport {db} from \"../Services/Firebase\"\n\n//--Chart Style Options--//\nChart.defaults.global.defaultFontFamily = \"Poppins\"\nChart.defaults.global.legend.display = false;\nChart.defaults.global.elements.line.tension = 0.5;\n//--Chart Style Options--//\n\nconst useStyles = makeStyles({\n});\n\nfunction Graph(props) {\n    const classes = useStyles();\n    const chartRef = React.createRef();\n\n    useEffect(() => {\n        const myChartRef = chartRef.current.getContext(\"2d\");\n        const {width: graphWidth} = myChartRef.canvas;\n        let gradientLine = myChartRef.createLinearGradient(0, 0, graphWidth * 2, 0);\n        gradientLine.addColorStop(0, \"#60BCB9\");\n        gradientLine.addColorStop(1, \"#7ACEFA\");\n\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                datasets: [\n                    {\n                        label: \"Humidity\",\n                        data: props.humidityData,\n                        fill: false,\n                        borderColor: gradientLine,\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n                responsive: true,\n                maintainAspectRatio: true,\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {\n                            unit: 'hour',\n                            tooltipFormat: \"MMM D, h:mm a\"\n                        },\n                        bounds: 'data',\n                        ticks: { display: true },\n                        gridLines: {\n                            display: false,\n                            drawBorder: true\n                        }\n                    }],\n                    yAxes: [{     \n                        ticks: { \n                            display: true,\n                            suggestedMin: 30,\n                            suggestedMax: 80, \n                        },\n                        gridLines: {\n                            display: true,\n                            drawBorder: false\n                        },\n                    }]\n                },\n            }\n        });\n    });\n\n    return (\n    <Grid container>\n        <Grid item xs={10}>\n            <div>\n                <canvas\n                    id=\"myChart\"\n                    ref={chartRef}\n                />\n            </div>\n        </Grid>\n    </Grid>\n    );\n}\n\nexport default Graph;","/Users/Kat/bud/docs/web/src/Components/Metric.js",[],"/Users/Kat/bud/docs/web/src/Services/Firebase.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":16,"column":11,"nodeType":"66","messageId":"67","endLine":16,"endColumn":18},{"ruleId":"68","severity":1,"message":"69","line":34,"column":41,"nodeType":"70","messageId":"71","endLine":34,"endColumn":43},{"ruleId":"72","severity":1,"message":"73","line":81,"column":17,"nodeType":"74","messageId":"75","endLine":94,"endColumn":18},{"ruleId":"76","severity":1,"message":"77","line":112,"column":8,"nodeType":"78","endLine":112,"endColumn":10,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":105,"column":17,"nodeType":"82","endLine":105,"endColumn":62},{"ruleId":"64","severity":1,"message":"83","line":14,"column":8,"nodeType":"66","messageId":"67","endLine":14,"endColumn":18},{"ruleId":"64","severity":1,"message":"84","line":68,"column":21,"nodeType":"66","messageId":"67","endLine":68,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":140,"column":33,"nodeType":"82","endLine":140,"endColumn":77},{"ruleId":"68","severity":1,"message":"69","line":36,"column":28,"nodeType":"70","messageId":"71","endLine":36,"endColumn":30},{"ruleId":"68","severity":1,"message":"69","line":37,"column":28,"nodeType":"70","messageId":"71","endLine":37,"endColumn":30},{"ruleId":"68","severity":1,"message":"69","line":38,"column":28,"nodeType":"70","messageId":"71","endLine":38,"endColumn":30},{"ruleId":"68","severity":1,"message":"69","line":39,"column":28,"nodeType":"70","messageId":"71","endLine":39,"endColumn":30},{"ruleId":"64","severity":1,"message":"65","line":17,"column":11,"nodeType":"66","messageId":"67","endLine":17,"endColumn":18},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createNewPlant'. Either include it or remove the dependency array.","ArrayExpression",["87"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'InputLabel' is defined but never used.","'setSpecies' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [createNewPlant]",{"range":"90","text":"91"},[4093,4095],"[createNewPlant]"]