{"version":3,"sources":["Components/Status.js","bud.png","Components/ActivityLog.js","Components/Graph.js","Components/Metric.js","newplant.png","Components/Dashboard.js","Services/Firebase.js","Components/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","backgroundColor","padding","borderRadius","color","marginBottom","fontSize","date","margin","float","paddingTop","Status","props","classes","type","Paper","elevation","className","Grid","container","item","xs","style","marginTop","message","time","split","height","header","labels","paddingLeft","paddingRight","footer","position","left","bottom","width","marginLeft","fontWeight","logo","ActivityLog","tSoilMoisture","tHumidity","tTemp","tLight","soilMoistureData","humidityData","tempData","lightData","today","Date","String","getDate","padStart","getMonth","getFullYear","getDateString","length","slice","y","t","src","budLogo","Chart","defaults","global","defaultFontFamily","legend","display","elements","line","tension","metricbutton","marginRight","fontFamily","textTransform","Graph","chartRef","React","createRef","useState","displayedMetric","setDisplayedMetric","dims","y_label","data","lowGradient","highGradient","useEffect","myChartRef","current","getContext","graphHeight","canvas","gradientLine","createLinearGradient","addColorStop","datasets","label","borderColor","options","responsive","maintainAspectRatio","scales","xAxes","tooltipFormat","bounds","scaleLabel","labelString","fontColor","ticks","maxTicksLimit","maxRotation","gridLines","drawBorder","yAxes","offset","tooltips","displayColors","titleFontColor","bodyFontColor","soilMoistureStyle","humidityStyle","tempStyle","lightStyle","Button","id","onClick","ref","textAlign","actual","target","actualSublabel","targetSublabel","Metric","metric","button","image","modal","modalConditionHeader","modalConditions","plantButton","Dashboard","open","setOpen","selectedPlant","setSelectedPlant","idealSoilMoisture","setIdealSoilMoisture","idealHumidity","setIdealHumidity","idealTemp","setIdealTemp","idealLight","setIdealLight","precipitation","setPrecipitation","minRootDepth","setMinRootDepth","phRange","setPhRange","nutriments","setNutriments","soilMoistureStr","humidityStr","tempStr","lightStr","e","a","searchPlant","value","plantResp","growthInfo","growth","soil_humidity","atmospheric_humidity","minimum_temperature","deg_f","light","minimum_precipitation","mm","minimum_root_depth","cm","ph_minimum","ph_maximum","soil_nutriments","startIcon","species","toLowerCase","spacing","Dialog","onClose","fullWidth","maxWidth","DialogContent","FormControl","minWidth","Select","onChange","displayEmpty","inputProps","MenuItem","plant","createNewPlant","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","database","proxyurl","HomePage","setTSoilMoisture","setTHumidity","setTTemp","setTLight","setSoilMoistureData","setHumidityData","setTempData","setLightData","setSpecies","name","axios","get","params","q","searchResp","console","log","plantId","plantInfo","newSoilMoisture","newHumidity","newTemp","newLight","common_name","updateTargets","scientific_name","soilMoistureTarget","humidityTarget","tempTarget","lightTarget","set","soil_moisture","humidity","temp","date_planted","toISOString","soilMoisture","query","once","then","snapshot","forEach","childSnapshot","key","val","push","parseInt","loadFirebaseData","lg","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b8b6d44.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from \"@material-ui/core/Grid\";\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport OpacityIcon from '@material-ui/icons/Opacity';\nimport CloudQueueIcon from '@material-ui/icons/CloudQueue';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: \"white\",\n        padding: \"7px 30px\",\n        borderRadius: 15,\n        color: \"#9C7E95\",\n        marginBottom: 10,\n        fontSize: 14,\n    },\n    date: {\n        margin: 0,\n        float: \"right\",\n        paddingTop: 5\n    }\n});\n\nfunction Status(props) {\n    const classes = useStyles();\n    // Determines icon based on whether stat is moisture/humidity/temp/light\n    // Options: \"moisture\", \"humidity\", \"temp\", \"light\"\n    const type = props.type\n\n    return (\n        <Paper elevation={5} className={classes.root}>\n            <Grid container>\n                <Grid item xs={1} style={{ marginTop: 3 }}>\n                    {(type == \"moisture\") && <OpacityIcon />}\n                    {(type == \"humidity\") && <CloudQueueIcon />}\n                    {(type == \"temp\") && <AcUnitIcon />}\n                    {(type == \"light\") && <WbSunnyIcon />}\n                </Grid>\n                <Grid item xs={7} style={{ paddingTop: 5 }}>\n                    {props.message}\n                </Grid>\n                <Grid item xs={4}>\n                    <p className={classes.date}>\n                        {props.time.split(\"T\")[1]}\n                    </p>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default Status;","export default __webpack_public_path__ + \"static/media/bud.c3563bee.png\";","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Status from './Status';\nimport budLogo from '../bud.png';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: \"#94B143\",\n        padding: \"30px 35px\",\n        height: \"100vh\",\n    },\n    header: {\n        color: \"white\",\n        fontSize: 20,\n        margin: \"0 0 50px 0\",\n    },\n    labels: {\n        color: \"white\",\n        marginBottom: 10,\n        fontSize: 16,\n        paddingLeft: 30,\n        paddingRight: 30,\n    },\n    footer: {\n        position: \"fixed\",\n        left: 0,\n        bottom: 0,\n        width: \"100%\",\n        color: \"white\",\n        marginLeft: 25,\n        fontWeight: \"bold\",\n    },\n    logo: {\n        width: \"40px\",\n        height: \"40px\"\n    }\n});\n\nfunction ActivityLog(props) {\n    const classes = useStyles();\n    const tSoilMoisture = props.tSoilMoisture;\n    const tHumidity = props.tHumidity;\n    const tTemp = props.tTemp;\n    const tLight = props.tLight;\n    const soilMoistureData = props.soilMoistureData;\n    const humidityData = props.humidityData;\n    const tempData = props.tempData;\n    const lightData = props.lightData;\n\n    function getDateString() {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n        return (dd + \"/\" + mm + \"/\" + yyyy);\n    }\n\n    return (\n    <Grid className={classes.root}>\n        <h6 className={classes.header}>Activity Log for {getDateString()}</h6>\n        <Grid container>\n            <Grid item xs={8} className={classes.labels}>\n                Status\n            </Grid>\n            <Grid item xs={4} className={classes.labels}>\n                <p style={{ margin: 0, float: \"right\" }}>Time</p>\n            </Grid>\n        </Grid>\n\n        {/* SOIL MOISTURE STATUS */}\n        {(soilMoistureData.length > 0) && \n         (soilMoistureData.slice(-1)[0].y < tSoilMoisture) && \n         <Status message=\"Moisture is low: Water your plant!\"\n                 time={soilMoistureData.slice(-1)[0].t}\n                 type=\"moisture\"\n         />}\n\n        {/* HUMIDITY STATUS */}\n        {(humidityData.length > 0) && \n         (humidityData.slice(-1)[0].y < tHumidity) &&\n         <Status message=\"It's not humid enough!\"\n                 time={humidityData.slice(-1)[0].t}\n                 type=\"humidity\"\n         />}\n\n        {/* TEMPERATURE STATUS */}\n        {(tempData.length > 0) && \n         (tempData.slice(-1)[0].y < tTemp) &&\n         <Status message=\"Temperature is getting colder!\"\n                 time={tempData.slice(-1)[0].t}\n                 type=\"temp\"\n         />}\n\n        {/* LIGHT STATUS */}\n        {(lightData.length > 0) && \n         (lightData.slice(-1)[0].y < tLight) &&\n         <Status message=\"Your plant needs more light!\"\n                 time={humidityData.slice(-1)[0].t}\n                 type=\"light\"\n         />}\n\n        <div className={classes.footer}>\n            <Grid container>\n                <img src={budLogo} className={classes.logo}/>\n                <h2 style={{margin: \"10px 5px\"}}>bud</h2>\n            </Grid>\n        </div>\n    </Grid>\n    )\n}\n\nexport default ActivityLog;","import { makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from '@material-ui/core/Button';\nimport Chart from \"chart.js\";\n\n//--Chart Style Options--//\nChart.defaults.global.defaultFontFamily = \"Poppins\"\nChart.defaults.global.legend.display = false;\nChart.defaults.global.elements.line.tension = 0.5;\n//--Chart Style Options--//\n\nconst useStyles = makeStyles({\n    metricbutton: {\n        backgroundColor: \"white\",\n        color: \"#8bc34a\",\n        fontSize: 14,\n        padding: \"4px 20px\",\n        marginRight: \"10px\",\n        fontFamily: \"Poppins\",\n        textTransform: \"none\",\n        borderRadius: 10,\n        // float: \"left\",\n        \"&:hover\": {\n            backgroundColor: \"#8bc34a\",\n            color: \"white\"\n        },\n    }\n});\n\nfunction Graph(props) {\n    const classes = useStyles();\n    const chartRef = React.createRef();\n\n    const [displayedMetric, setDisplayedMetric] = useState(\"Soil Moisture\");\n\n    const dims = {\n        \"Soil Moisture\": {\n            y_label: \"Soil Moisture (%)\",\n            data: props.soilMoistureData,\n            lowGradient: \"rgb(96, 188, 177, 0.2)\",\n            highGradient: \"rgb(122, 206, 250, 1.0)\"\n        },\n        \"Humidity\": {\n            y_label: \"Air Humidity (%)\",\n            data: props.humidityData,\n            lowGradient: \"rgb(167, 191, 232, 0.2)\",\n            highGradient: \"rgb(97, 144, 232, 1.0)\"\n        },\n        \"Temperature\": {\n            y_label: \"Temperature (°F)\",\n            data: props.tempData,\n            lowGradient: \"rgb(255, 195, 160, 0.2)\",\n            highGradient: \"rgb(255, 175, 189, 1.0)\"\n        },\n        \"Luminance\": {\n            y_label: \"Luminance (lx)\",\n            data: props.lightData,\n            lowGradient: \"rgb(255, 210, 0, 0.2)\",\n            highGradient: \"rgb(247, 151, 30, 1.0)\"\n        }\n    };\n\n    useEffect(() => {\n        const myChartRef = chartRef.current.getContext(\"2d\");\n        const {height: graphHeight} = myChartRef.canvas;\n        let gradientLine = myChartRef.createLinearGradient(0, 0, 0, graphHeight);\n        gradientLine.addColorStop(0, dims[displayedMetric].lowGradient);\n        gradientLine.addColorStop(1, dims[displayedMetric].highGradient);\n\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                datasets: [\n                    {\n                        label: displayedMetric,\n                        data: dims[displayedMetric].data,\n                        borderColor: gradientLine,\n                        backgroundColor: gradientLine,\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n                responsive: true,\n                maintainAspectRatio: true,\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {\n                            tooltipFormat: \"MMM D, h:mm a\"\n                        },\n                        bounds: 'data',\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Time',\n                            fontColor: '#87753F',\n                            fontSize: 16,\n                        },\n                        ticks: { \n                            display: true,\n                            maxTicksLimit: 10,\n                            maxRotation: 0,\n                        },\n                        gridLines: {\n                            display: false,\n                            drawBorder: true\n                        }\n                    }],\n                    yAxes: [{    \n                        offset: true,\n                        scaleLabel: {\n                            display: true,\n                            labelString: dims[displayedMetric].y_label,\n                            fontColor: '#87753F',\n                            fontSize: 16,\n                        }, \n                        ticks: { \n                            display: true,\n                            // suggestedMin: 30,\n                            // suggestedMax: 80, \n                        },\n                        gridLines: {\n                            display: true,\n                            drawBorder: false\n                        },\n                    }]\n                },\n                tooltips: {\n                    displayColors: false,\n                    backgroundColor: \"white\",\n                    titleFontColor: \"#8bc34a\",\n                    bodyFontColor: dims[displayedMetric].highGradient,\n                },\n            }\n        });\n    });\n\n    var soilMoistureStyle = (displayedMetric === \"Soil Moisture\") ? {backgroundColor:\" #8bc34a\", color: \"white\"} : {};\n    var humidityStyle = (displayedMetric === \"Humidity\") ? {backgroundColor:\" #8bc34a\", color: \"white\"} : {};\n    var tempStyle = (displayedMetric === \"Temperature\") ? {backgroundColor:\" #8bc34a\", color: \"white\"} : {};\n    var lightStyle = (displayedMetric === \"Light\") ? {backgroundColor:\" #8bc34a\", color: \"white\"} : {};\n\n    return (\n    <Grid container>\n        <Grid item xs={10}>\n            <Button id=\"b1\" className={classes.metricbutton} style={soilMoistureStyle} onClick={() => setDisplayedMetric(\"Soil Moisture\")}>Soil Moisture</Button>\n            <Button id=\"b2\" className={classes.metricbutton} style={humidityStyle} onClick={() => setDisplayedMetric(\"Humidity\")}>Humidity</Button>\n            <Button id=\"b3\" className={classes.metricbutton} style={tempStyle} onClick={() => setDisplayedMetric(\"Temperature\")}>Temperature</Button> \n            <Button id=\"b4\" className={classes.metricbutton} style={lightStyle} onClick={() => setDisplayedMetric(\"Luminance\")}>Light</Button>\n        </Grid>\n        <Grid item xs={10}>\n            <div>\n                <canvas\n                    id=\"myChart\"\n                    ref={chartRef}\n                />\n            </div>\n        </Grid>\n    </Grid>\n    );\n}\n\nexport default Graph;","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n    root: {\n        padding: 10,\n        borderRadius: 10,\n        textAlign: \"center\"\n    },\n    label: {\n        color: \"#87753F\",\n        fontSize: 15,\n        margin: \"10px 0 0 0\",\n        fontWeight: \"bold\"\n    },\n    actual: {\n        color: \"#7EA7CB\",\n        fontSize: 35,\n        margin: 0,\n    },\n    target: {\n        color: \"#94B143\",\n        fontSize: 35,\n        margin: 0,\n    },\n    actualSublabel: {\n        color: \"#7EA7CB\",\n        margin: 0,\n    },\n    targetSublabel: {\n        color: \"#94B143\",\n        margin: 0,\n    }\n});\n\nfunction Metric(props) {\n    const classes = useStyles();\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            <Grid container>\n                <Grid item xs={6}>\n                    <p className={classes.actual} style={{color:props.color}}>{props.actual}</p>\n                    <p className={classes.actualSublabel} style={{color:props.color}}>Actual</p>\n                </Grid>\n                <Grid item xs={6}>\n                {/* <div style={{borderLeft: \"1px solid green\", height: \"50px\"}}></div> */}\n                    <p className={classes.target}>{props.target}</p>\n                    <p className={classes.targetSublabel}>Target</p>\n                </Grid>\n                <Grid item xs={12}>\n                    <p className={classes.label}>{props.metric}</p>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default Metric;","export default __webpack_public_path__ + \"static/media/newplant.01800a77.png\";","import { makeStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Graph from \"./Graph\";\nimport Button from '@material-ui/core/Button';\nimport Metric from \"./Metric\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport plant from '../newplant.png'\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: \"#F5F5FB\",\n        padding: \"30px 60px\",\n        height: \"100vh\",\n    },\n    header: {\n        color: \"#94B143\",\n        fontSize: 20,\n        margin: \"0 0 35px 0\",\n    },\n    labels: {\n        color: \"#87753F\",\n        fontSize: 17,\n        fontWeight: \"bold\"\n    },\n    button: {\n        backgroundColor: \"white\",\n        color: \"#8bc34a\",\n        fontSize: 14,\n        padding: \"4px 20px\",\n        fontFamily: \"Poppins\",\n        textTransform: \"none\",\n        borderRadius: 10,\n        float: \"right\",\n        \"&:hover\": {\n            backgroundColor: \"#8bc34a\",\n            color: \"white\"\n        },\n    },\n    image: {\n        paddingTop: 20,\n        width: 200,\n        height: 200\n    },\n    modal: {\n        padding: 30,\n    },\n    modalConditionHeader: {\n        color: \"#87753F\",\n        fontWeight: \"bold\",\n        marginBottom: 5,\n    },\n    modalConditions: {\n        color: \"#87753F\",\n        margin: 0\n    },\n    plantButton: {\n        backgroundColor: \"#8bc34a\",\n        color: \"white\",\n        fontSize: 18,\n        padding: \"4px 20px\",\n        fontFamily: \"Poppins\",\n        textTransform: \"none\",\n        borderRadius: 10,\n        float: \"right\",\n        \"&:hover\": {\n            backgroundColor: \"#17402e\",\n        },\n    }\n});\n\nfunction Dashboard(props) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [selectedPlant, setSelectedPlant] = useState(\"\");\n    const [idealSoilMoisture, setIdealSoilMoisture] = useState(40)\n    const [idealHumidity, setIdealHumidity] = useState(40);\n    const [idealTemp, setIdealTemp] = useState(50);\n    const [idealLight, setIdealLight] = useState(10);\n    const [precipitation, setPrecipitation] = useState(\"N/A\");\n    const [minRootDepth, setMinRootDepth] = useState(\"N/A\");\n    const [phRange, setPhRange] = useState(\"N/A\");\n    const [nutriments, setNutriments] = useState(\"N/A\");\n\n    var soilMoistureStr = (props.soilMoistureData.length > 0) ? props.soilMoistureData.slice(-1)[0].y+\"%\" : \"?\";\n    var humidityStr = (props.humidityData.length > 0) ? props.humidityData.slice(-1)[0].y+\"%\" : \"?\";\n    var tempStr = (props.tempData.length > 0) ? props.tempData.slice(-1)[0].y+\"°F\" : \"?\";\n    var lightStr = (props.lightData.length > 0) ? props.lightData.slice(-1)[0].y+\"lx\" : \"?\";\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    async function handleChange(e) {\n        const plantResp = await props.searchPlant(e.target.value);\n        const growthInfo = plantResp.data.data.growth;\n        setSelectedPlant(e.target.value);\n        if (growthInfo.soil_humidity) setIdealSoilMoisture(growthInfo.soil_humidity);\n        if (growthInfo.atmospheric_humidity) setIdealHumidity(growthInfo.atmospheric_humidity * 10);\n        if (growthInfo.minimum_temperature) setIdealTemp(growthInfo.minimum_temperature.deg_f);\n        if (growthInfo.light) setIdealLight(growthInfo.light * 4);\n        if (growthInfo.minimum_precipitation) setPrecipitation(growthInfo.minimum_precipitation.mm+\"mm/yr\");\n        if (growthInfo.minimum_root_depth) setMinRootDepth(growthInfo.minimum_root_depth.cm);\n        if (growthInfo.ph_minimum && growthInfo.ph_maximum) setPhRange(growthInfo.ph_minimum+\" - \"+growthInfo.ph_maximum)\n        if (growthInfo.soil_nutriments) setNutriments(growthInfo.soil_nutriments);\n    }\n\n    const handleClickPlant = () => {\n        if (selectedPlant === \"\") return;\n        props.createNewPlant(selectedPlant);\n        setOpen(false);\n    };\n\n    return (\n    <Grid className={classes.root}>\n        {/* HEADER */}\n        <Grid container>\n            <Grid item xs={6}>\n                <h6 className={classes.header}>Dashboard</h6>\n            </Grid>\n            <Grid item xs={6}>\n                <Button startIcon={<AddIcon />}\n                        className={classes.button}\n                        onClick={handleClickOpen}>Track a new plant</Button>\n            </Grid>\n        </Grid>\n\n        {/* CHART */}\n        <p className={classes.labels}>Your {props.species.toLowerCase()}'s progress</p>\n        <Graph soilMoistureData={props.soilMoistureData} humidityData={props.humidityData} tempData={props.tempData} lightData={props.lightData}/>\n        \n        {/* STATS */}\n        <p className={classes.labels}>Helpful stats</p>\n        <Grid container spacing={2}>\n            <Grid item xs={3}><Metric metric=\"Soil Moisture\" actual={soilMoistureStr} target={String(props.tSoilMoisture)+\"%\"} color={\"rgb(122, 206, 250, 1.0)\"}/></Grid>\n            <Grid item xs={3}><Metric metric=\"Humidity\" actual={humidityStr} target={String(props.tHumidity)+\"%\"} color={\"rgb(97, 144, 232, 1.0)\"}/></Grid>\n            <Grid item xs={3}><Metric metric=\"Temperature\" actual={tempStr} target={String(props.tTemp)+\"°F\"} color={\"rgb(255, 175, 189, 1.0)\"}/></Grid>\n            <Grid item xs={3}><Metric metric=\"Light\" actual={lightStr} target={String(props.tLight)+\"lx\"} color={\"rgb(247, 151, 30, 1.0)\"}/></Grid>\n        </Grid>\n\n        {/* MODAL */}\n        <Dialog open={open} \n                onClose={handleClose}\n                className={classes.modal}\n                fullWidth={true}\n                maxWidth='sm'>\n                    <DialogContent className={classes.modal}>\n                        <Grid container>\n                            <Grid item xs={8}>\n                                <h3 style={{ color: \"#233F30\", margin: \"10px 0 0 0\" }}>What species are you tracking?</h3>\n                                <FormControl style={{minWidth: 150, marginTop: 2}}>\n                                    <Select\n                                        onChange={handleChange}\n                                        displayEmpty\n                                        inputProps={{ 'aria-label': 'Without label' }}\n                                    >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value=\"Sunflower\">Sunflower</MenuItem>\n                                    <MenuItem value=\"Daisy\">Daisy</MenuItem>\n                                    <MenuItem value=\"Garden Tomato\">Garden Tomato</MenuItem>\n                                    </Select>\n                                </FormControl>\n                                <p className={classes.modalConditionHeader}>Find out its ideal conditions</p>\n                                <p className={classes.modalConditions}>Soil Moisture: {idealSoilMoisture}%</p>\n                                <p className={classes.modalConditions}>Humidity: {idealHumidity}%</p>\n                                <p className={classes.modalConditions}>Min Temperature: {idealTemp}°F</p>\n                                <p className={classes.modalConditions}>Light: {idealLight} lx</p>\n                                <p className={classes.modalConditions}>Precipitation: {precipitation}</p>\n                                <p className={classes.modalConditionHeader}>Planting Tips:</p>\n                                <p className={classes.modalConditions}>Min Root Depth: {minRootDepth} cm</p>\n                                <p className={classes.modalConditions}>Soil pH: {phRange}</p>\n                                <p className={classes.modalConditions}>Soil Nutriments: {nutriments}</p>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <img src={plant} className={classes.image}/>\n                            </Grid>\n                        </Grid>\n                        <Button startIcon={<AddIcon />}\n                                    className={classes.plantButton}\n                                    onClick={handleClickPlant}>Plant it!</Button>\n                    </DialogContent>\n        </Dialog>\n    </Grid>\n    )\n}\n\nexport default Dashboard;","import firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyB2QC5bbZ4BlBRssBIUYBp9e9he0b8Zs_s\",\n    authDomain: \"bud-project-d6a10.firebaseapp.com\",\n    databaseURL: \"https://bud-project-d6a10-default-rtdb.firebaseio.com\",\n    projectId: \"bud-project-d6a10\",\n    storageBucket: \"bud-project-d6a10.appspot.com\",\n    messagingSenderId: \"1020962827599\",\n    appId: \"1:1020962827599:web:13853a36b2e53812c1693a\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.database()","import { makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ActivityLog from \"./ActivityLog\";\nimport Dashboard from \"./Dashboard\";\nimport axios from \"axios\";\nimport {db} from \"../Services/Firebase\"\n\nconst useStyles = makeStyles(\n    \n);\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nfunction HomePage() {\n    const classes = useStyles();\n\n    const [tSoilMoisture, setTSoilMoisture] = useState(40);\n    const [tHumidity, setTHumidity] = useState(40);\n    const [tTemp, setTTemp] = useState(50);\n    const [tLight, setTLight] = useState(10);\n    const [soilMoistureData, setSoilMoistureData] = useState([]);\n    const [humidityData, setHumidityData] = useState([]);\n    const [tempData, setTempData] = useState([]);\n    const [lightData, setLightData] = useState([]);\n    const [species, setSpecies] = useState(\"sunflower\");\n\n    async function searchPlant(name) {\n        const searchResp = await axios\n            .get(proxyurl + \"https://trefle.io/api/v1/species/search?token=R8xZcZH6j9PoyOTqoGc_Pndhdvx6nM1aD7FGHYBQc2M\", {\n                params: {\n                    q: name\n                }\n            });\n        if (searchResp.data.data.length == 0) {\n            console.log(\"No results found.\");\n            return;\n        }\n        const plantId = searchResp.data.data[0].id;\n    \n        const plantResp = await axios \n            .get(proxyurl + `https://trefle.io/api/v1/species/${plantId}?token=R8xZcZH6j9PoyOTqoGc_Pndhdvx6nM1aD7FGHYBQc2M`);\n        return plantResp;\n    };\n\n    async function createNewPlant(name) {\n        const plantResp = await searchPlant(name)\n        if (!plantResp) return;\n        const plantInfo = plantResp.data.data;\n        const growthInfo = plantInfo.growth;\n        \n        const newSoilMoisture = (growthInfo.soil_humidity) ? (growthInfo.soil_humidity) : tSoilMoisture;\n        const newHumidity = (growthInfo.atmospheric_humidity) ? growthInfo.atmospheric_humidity * 10 : tHumidity;\n        const newTemp = (growthInfo.minimum_temperature) ? growthInfo.minimum_temperature.deg_f : tTemp;\n        const newLight = (growthInfo.light) ? growthInfo.light * 4 : tLight;\n\n        setSpecies(plantInfo.common_name);\n        setTSoilMoisture(newSoilMoisture);\n        setTHumidity(newHumidity);\n        setTTemp(newTemp);\n        setTLight(newLight);\n        updateTargets(plantInfo.common_name, plantInfo.scientific_name, newSoilMoisture, newHumidity, newTemp, newLight);\n    };\n\n    function loadFirebaseData() {\n        let soilMoisture = [];\n        let humidity = [];\n        let temp = [];\n        let light = [];\n        var query = db.ref(\"active-plant/data\");\n        query.once(\"value\")\n        .then(function(snapshot) {\n            snapshot.forEach(function(childSnapshot) {\n                // key is ISO timestamp\n                var key = childSnapshot.key;\n\n                var data = childSnapshot.val().split(\",\");\n                soilMoisture.push({t:key, y:parseInt(data[0])});\n                humidity.push({t:key, y:parseInt(data[1])});\n                temp.push({t:key, y:parseInt(data[2])});\n                light.push({t:key, y:parseInt(data[3])});\n            });\n            setSoilMoistureData(soilMoisture);\n            setHumidityData(humidity);\n            setTempData(temp);\n            setLightData(light);\n        });\n\n        query = db.ref(\"active-plant/target\");\n        query.once(\"value\")\n        .then(function(snapshot) {\n            snapshot.forEach(function(childSnapshot) {\n                switch(childSnapshot.key) {\n                    case \"soil_moisture\": \n                        setTSoilMoisture(childSnapshot.val());\n                        break;\n                    case \"humidity\":\n                        setTHumidity(childSnapshot.val());\n                        break;\n                    case \"temp\":\n                        setTTemp(childSnapshot.val());\n                        break;\n                    case \"light\":\n                        setTLight(childSnapshot.val());\n                        break;\n                    case \"species\":\n                        setSpecies(childSnapshot.val());\n                        break;\n                }\n            })\n        });\n    }\n\n    function updateTargets(species, scientific_name, soilMoistureTarget, humidityTarget, tempTarget, lightTarget) {\n        const today = new Date();\n        db.ref(\"active-plant/target\").set({\n            soil_moisture: soilMoistureTarget,\n            humidity: humidityTarget,\n            temp: tempTarget,\n            light: lightTarget,\n            species: species,\n            scientific_name: scientific_name,\n            date_planted: today.toISOString()\n        }); \n    }\n\n    useEffect(() => {\n        // createNewPlant('Sunflower');\n        loadFirebaseData();   \n    }, []);\n\n    return (\n        <Grid container>\n            <Grid item xs={12} lg={4}>\n                <ActivityLog \n                    tSoilMoisture={tSoilMoisture}\n                    tHumidity={tHumidity}\n                    tTemp={tTemp}\n                    tLight={tLight}\n                    soilMoistureData={soilMoistureData}\n                    humidityData={humidityData}\n                    tempData={tempData}\n                    lightData={lightData}\n                />\n            </Grid>\n            <Grid item xs={12} lg={8}>\n                <Dashboard\n                    species={species}\n                    tSoilMoisture={tSoilMoisture}\n                    tHumidity={tHumidity}\n                    tTemp={tTemp}\n                    tLight={tLight}\n                    soilMoistureData={soilMoistureData}\n                    humidityData={humidityData}\n                    tempData={tempData}\n                    lightData={lightData}\n                    searchPlant={searchPlant} \n                    createNewPlant={createNewPlant}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default HomePage;","import './App.css';\nimport HomePage from './Components/HomePage';\n\nfunction App() {\n  return (\n    <HomePage />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}